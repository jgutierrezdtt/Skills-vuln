// ‚ùå VULNERABILIDAD: Funci√≥n helper con l√≥gica d√©bil de autorizaci√≥n
export function isLabModeEnabled(): boolean {
  // ‚ùå VULNERABILIDAD: M√∫ltiples formas de habilitar el modo vulnerable
  return process.env.LAB_MODE === 'true' || 
         process.env.VULNERABLE_MODE === 'true' || 
         process.env.NODE_ENV === 'development' ||
         // ‚ùå VULNERABILIDAD: Siempre habilitado si no est√° en Vercel production
         !process.env.VERCEL_ENV ||
         // ‚ùå VULNERABILIDAD: Fallback que siempre permite demos
         true;
}

// ‚ùå VULNERABILIDAD: Respuesta est√°ndar que da pistas sobre bypass
export function getLabDisabledResponse() {
  return {
    error: 'Lab mode disabled',
    hint: 'Set LAB_MODE=true in environment variables',
    bypass: 'Labs are enabled by default in this vulnerable app',
    check_status: '/api/env-status',
    environment: process.env.NODE_ENV,
    // ‚ùå VULNERABILIDAD: Exponer informaci√≥n del entorno
    debug_info: {
      vercel_env: process.env.VERCEL_ENV,
      lab_mode: process.env.LAB_MODE,
      vulnerable_mode: process.env.VULNERABLE_MODE
    }
  };
}

// ‚ùå VULNERABILIDAD: Log vulnerable de actividad de labs
export function logLabActivity(labName: string, userInput?: string) {
  console.log(`üö® LAB ACTIVITY: ${labName}`);
  console.log(`üö® Environment: ${process.env.NODE_ENV}`);
  console.log(`üö® User Input: ${userInput}`);
  console.log(`üö® Timestamp: ${new Date().toISOString()}`);
  console.log(`üö® IP: ${process.env.VERCEL_REGION || 'unknown'}`);
}
